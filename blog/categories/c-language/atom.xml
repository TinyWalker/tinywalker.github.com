<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c language | 静谧小屋]]></title>
  <link href="http://Albert0010.github.io/blog/categories/c-language/atom.xml" rel="self"/>
  <link href="http://Albert0010.github.io/"/>
  <updated>2014-03-25T09:59:14+08:00</updated>
  <id>http://Albert0010.github.io/</id>
  <author>
    <name><![CDATA[Albert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[结构体内存大小]]></title>
    <link href="http://Albert0010.github.io/blog/2014/03/24/struct-size/"/>
    <updated>2014-03-24T10:17:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2014/03/24/struct-size</id>
    <content type="html"><![CDATA[<h2>一.Situation</h2>

<p>&emsp; 今天看Simon Tatham的&lt;&lt;The Descent to C>>时,发现memory layout 自己还是不太清楚,特别是结构体部分.例如:
```c
struct foo { char c; int i; };
struct foo my_array[3] = {</p>

<pre><code>{ 'x', 123 },
{ 'y', 456 },
{ 'z', 789 },
</code></pre>

<p>};</p>

<p>```</p>

<p>其内存为:</p>

<p><img src="/images/memory.png"></p>

<p>为什么要填充字节呢?通过学习c关键字sizeof,让我们一起了解下struct的内存结构吧,let&rsquo;s start!</p>

<!--more-->


<h2>二.Task</h2>

<p>通过学习sizeof的使用方法,了解c语言中struct的内存结构</p>

<h2>三.Action</h2>

<h3>1.Sizeof的定义及使用方法</h3>

<p>sizeof 是关键字不是函数,作用是获取变量占内存空间的字节数,主要有以下几种方式:</p>

<ol>
<li><p>sizeof(object)</p></li>
<li><p>sizeof(type_name)</p></li>
<li><p>sizeof object</p></li>
</ol>


<p>注意:没有sizeof type_name,例如下面的选择题:</p>

<p>计算变量所占字节数,下列选项中不正确的为()</p>

<p>int i;</p>

<p>A)sizeof(int) B)sizeof(i) C)sizeof int D)sizeof i</p>

<p>答案显然是C</p>

<h3>2.通过Sizeof了解结构体的内存分配</h3>

<h3>2.1 单个结构体占字节数</h3>

<p>定义如下结构体:
```c
struct foo{</p>

<pre><code>char c;
int i;
</code></pre>

<p>};</p>

<p>```</p>

<p>其内存字节数为8:</p>

<p>这是为什么呢?下面一一到来:</p>

<p>首先我们要知道,字节对齐对计算机内存读取速度有很大的影响,所以编译器在编译的过程中就会对字节对齐进行特殊的处理,主要有一下三条规则:</p>

<p>1.结构体变量的首地址能够被其最宽基本类型成员的大小所整除</p>

<p>2.结构体每个成员相对于结构体首地址的偏移量（offset）都是成员大小的整数倍，如有需要编译器会在成员之间加上填充字节(internal adding)</p>

<p>3.结构体的总大小为结构体最宽基本类型成员大小的整数倍，如有需要编译器会在最末一个成员之后加上填充字节(trailing padding)</p>

<p>结构体某个成员相对于结构体首地址的偏移量可以通过宏offsetof()来获得，这个宏也在stddef.h中定义，如下：</p>

<pre><code>#define offsetof(s,m) (size_t)&amp;(((s *)0)-&gt;m)
</code></pre>

<p>例如，想要获得foo中c的偏移量，方法为</p>

<p>size_t pos = offsetof(foo, c);// pos等于1</p>

<p>根据这三条规则可知, int在32位的系统中占4个字节, 所以 c和i 加起来是5个字节,但结构体整体所占字节数必须是结构体内部占字节数最大变量的整数倍,故整个foo结构体所占数位8个byte</p>

<h3>2.2 结构体中含结构体情况</h3>

<p>定义如下结构体:
```c
struct foo2{</p>

<pre><code>char ch;
struct foo f;
char ch2;
</code></pre>

<p>};</p>

<p>```</p>

<p>其占内存数为16个字节,其中当foo2确定最宽字节数时,将foo结构体拆开了看, 当考虑偏移量的时候作为整体来看,所以整个foo2结构体所占字节数应该位:
1+8+3+1+3 = 16个字节.</p>

<h3>2.3自定义对齐方式下结构体内存大小</h3>

<p>定义如下结构体:
```c</p>

<h1>pragma pack(push)</h1>

<h1>pragma pack(2)</h1>

<p>struct foo{</p>

<pre><code>char ch;
int i;
</code></pre>

<p>};</p>

<p>struct foo3{</p>

<pre><code>char ch;
struct foo f;
char ch2;
</code></pre>

<p>};</p>

<h1>pragma pack(pop)</h1>

<p>```</p>

<p>#pragma 是用来编译器指示的,其中pack命令是用来调整编译器针对结构体对齐的.其基本用法如下:</p>

<p>#pragma pack(n)，n为字节对齐数，其取值为1、2、4、8、16，默认是8，如果这个值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准，即是说，结构体成员的偏移量应该取二者的最小值，公式如下：</p>

<p>offsetof(item) = min(n,sizeof(item))</p>

<p>故,上述结构体foo的偏移为:offset=min(sizeof(i), 2)=2, sizeof(struct foo) = 1 + 1 + 4 = 6; foo3的偏移量offset也为2, sizeof(struct foo3) = 1 +1 +6+1 +1 = 10</p>

<h2>四.Result</h2>

<p>结构体内存大小决定于结构体内部成员的最宽字节数,主要满足两点:</p>

<p><strong><em>1.结构体每个成员相对了结构体开始的偏移量必须是最宽字节数的整数倍</em></strong></p>

<p><strong><em>2.整体结构体所占字节数也必须是最宽字节数的整数倍</em></strong></p>

<p><strong><em>3.如果自定义对齐方式,则首先算出结构体的偏移量,然后满足上面两个条件</em></strong></p>
]]></content>
  </entry>
  
</feed>
