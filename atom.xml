<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Albert Blog]]></title>
  <link href="http://Albert0010.github.io/atom.xml" rel="self"/>
  <link href="http://Albert0010.github.io/"/>
  <updated>2013-08-23T20:40:20+08:00</updated>
  <id>http://Albert0010.github.io/</id>
  <author>
    <name><![CDATA[Albert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/21/title/"/>
    <updated>2013-08-21T13:14:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/21/title</id>
    <content type="html"><![CDATA[<p>&emsp; 字符是计算机处理文字的最基本单位，在查找文件时，我们一般会使用<strong><em>通配符</em></strong>(wildcard),例如*和?等。和通配符类似，正则表达式也是用来模式匹配的，而且功能更加强大。是模式匹配中，正则表达式可谓是带头大哥。各种语言都有支持，如python的re包，awk等。linux虽然略有不同，但都是源于其基本的原则，改变只是为了和posix兼容罢了。还等什么，快来和这位大哥会晤了。。。。。</p>

<!--more-->


<h2>1.元字符</h2>

<p>小编：大哥，我想搜you单词，无奈youself，young&hellip;什么都现身了，怎么解?</p>

<p>大哥：easy，试一试元字符\byou\b匹配</p>

<p>小编：果断有效，不错</p>

<p>大哥：下面是常用的元字符，记住它，好办事</p>

<table>
<thead>
<tr>
<th></th>
<th>代码</th>
<th align="center">  解释</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>.</td>
<td align="center">匹配除换行以外的所有子符</td>
</tr>
<tr>
<td></td>
<td>\w</td>
<td align="center">匹配字母，数字,下划线或汉字</td>
</tr>
<tr>
<td></td>
<td>\s</td>
<td align="center">匹配任意空白符</td>
</tr>
<tr>
<td></td>
<td>\d</td>
<td align="center">匹配任意数字</td>
</tr>
<tr>
<td></td>
<td>\b</td>
<td align="center">匹配单词的开始或结束</td>
</tr>
<tr>
<td></td>
<td>^</td>
<td align="center">匹配字符串的开始</td>
</tr>
<tr>
<td></td>
<td>$</td>
<td align="center">匹配字符串的结束</td>
</tr>
</tbody>
</table>


<h2>2.重复</h2>

<p>&emsp;用过通配符的小伙伴们应该都了解重复这一限定符，所以小编仅仅列出下表：</p>

<table>
<thead>
<tr>
<th></th>
<th>代码</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>*</td>
<td align="center">重复零次或更多次</td>
</tr>
<tr>
<td></td>
<td>+</td>
<td align="center">重复1次或更多次</td>
</tr>
<tr>
<td></td>
<td>{n}</td>
<td align="center">重复n次</td>
</tr>
<tr>
<td></td>
<td>{n,}</td>
<td align="center">至少重复n次</td>
</tr>
<tr>
<td></td>
<td>{n，m}</td>
<td align="center">重复n到m次</td>
</tr>
</tbody>
</table>


<p><strong><em>需要使用+或*时，使用转意符\</em></strong></p>

<h2>3.分支条件</h2>

<p>&emsp;分支条件其实就是将几个满足匹配条件的正则表达士通过或的方式放在一起，具体用符号|来表示。<strong>使用分支条件一定要注意分支条件的顺序，匹配时会按从左到右的顺序依次遍历，一但满足条件，就停止匹配</strong></p>

<p>例如：美国邮政编码的规则如下：5位数字或者用连字符连接的9位数字。在进行匹配时，必须采用<code>\d{5}-\d{4}|\d{5}</code>,如果采用<code>\d{5}|\d{5}-\d{4|</code>时，只会匹配5位的邮编号码或者是9位邮编号码的前5位</p>

<h2>4.括号作用</h2>

<h4>小括号()</h4>

<p>&emsp;小括号主要用来分组，以便<strong><em>子表达式</em></strong>（多个字符串)重复,分支选择等</p>

<h4>中括号[]</h4>

<p>&emsp;将不同的字符放在中括号里，匹配其中的一个字符且仅匹配一个字符。其实中括号是分支条件的最小化。<strong>两者都选择其中的一个元素匹配,只是分支条件是多个表达式的集合而中括号是多个字符的集合</strong></p>

<h4>大括号{}</h4>

<p>&emsp;用于重复，见<strong><em>2.重复</em></strong></p>

<p>eg: IP地址匹配： <code>(2[0-4][0-9]|25[0-5]|[01]?\d\d?\.){3}(2[0-4][0-9]|25[0-5]|[01]?\d\d?)</code></p>

<h2>5.反意</h2>

<p>&emsp;有时需要表达“除。。。之外”的意思，就需要反意修饰符。以下列出一些反意的代码</p>

<table>
<thead>
<tr>
<th></th>
<th>代码</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>\W</td>
<td align="center">匹配除了字母，数字，下划线，汉字之外的字符</td>
</tr>
<tr>
<td></td>
<td>\D</td>
<td align="center">匹配除了数字之外的字符</td>
</tr>
<tr>
<td></td>
<td>\S</td>
<td align="center">匹配除了空白符之外的字符</td>
</tr>
<tr>
<td></td>
<td>[^x]</td>
<td align="center">匹配除了x之外的字符</td>
</tr>
<tr>
<td></td>
<td>[^abc]</td>
<td align="center">匹配除了abc之外的字符</td>
</tr>
</tbody>
</table>


<h2>6.后向引用</h2>

<p>&emsp;匹配一方面是查找到所需要的东西，另一方面则是使用所查找到的东西。故小编认为后向引用是正则表达式这位大哥最为重要的一部分。如此之重，还是多多学习的为好。。。</p>

<p>&emsp;首先还是列下语法,切勿急切</p>

<table border="2">
<tr>
<th>分类</th>
<th>代码</th>
<th >解释</th>
</tr>
<tr>
<td rowspan="3">捕获(内容匹配)</td>
<td>(exp)</td>
<td>匹配exp，并把获取的内容自动命名到组里</td>
</tr>
<tr>
<td>(?<name>exp)</td>
<td>匹配exp，并把获取的内容放在name组里，也可以写成(?&#96;name&#96;exp)</td>
</tr>
<tr>
<td>(?:exp)</td>
<td>匹配exp，不获取匹配的内容，也不添加到分组中</td>
</tr>
<tr >
<td rowspan="4">零宽断言(位置匹配)</td>
<td>(?<=exp)</td>
<td>匹配exp后边的位置</td>
</tr>
<tr>
<td>(?=exp)</td>
<td>匹配exp之前的位置</td>
</tr>
<td>(?!exp)</td>
<td>匹配后面跟着不是exp的位置</td>
</tr>
<tr>
<td>(?< !exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释</td>
<td>(?#comment)</td>
<td>编写注释文档</td>
</tr>
</table>


<p><strong><em>注：(?&lt; !exp)中&lt;和!之间没有空格，由于octopress和markdown的问题两者没法连接起来显示，故人为中间加了一个空格</em></strong></p>

<p>&emsp;默认情况下，使用小括号指定的子表达式都会产生分组，并自动获取组号。其规则为：
从左到右，分组的组号依次为0, 1, 2, &hellip; 引用时，只需使用\0, \1, \2, &hellip;就ok了。例如\b(?\d+)\0\b表示匹配重复的数字或单个数字(1,11,111,&hellip;)。如果像(?<word>exp)指定了组名，引用时需要前边添加\k。For example: \b(?<word>\d+)\k<word>\b</p>

<p>&emsp;零断言匹配一栏下的各种代码，只改变文本的位置指针，不记录exp的值。例如：文本: Hello world! 产用(?&lt;=Hello )匹配的内容为world!,不包含Hello 。</p>

<h2>7.贪婪与懒惰</h2>

<p>&emsp;之前一直被?困扰，了解了贪婪匹配和懒惰匹配才算是略懂一二。贪婪，顾名思义就是尽量多的意思，相反，懒惰则是尽量少的意思。在正则表达式中，用?加以区分，默认是贪婪模式，当添加了?就是懒惰模式了。举一个简单的例子：文本：abcacb
贪婪模式：a.*b 结果为：<code>abcacb</code>  懒惰模式：a.*?b  结果为：<code>ab</code> 和<code>acb</code>。在<strong>1.元字符</strong>最后添加?表示懒惰模式，即匹配尽量少的子符。</p>

<h3 align="center">the end, not the end! it just the beginning of practising.</h3>


<p>在此，向大家推荐一个参考学习网站</p>

<p><a href="http://www.deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/17/title/"/>
    <updated>2013-08-17T10:39:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/17/title</id>
    <content type="html"><![CDATA[<h2>基本概念</h2>

<p>1.斜树</p>

<blockquote><p>所有的结点都只有左子树的二叉树叫左斜树。所有的结点都只有右子树的二叉树叫做右斜树。两者都称谓斜树。</p></blockquote>

<p>2.满二叉树</p>

<blockquote><p>在一棵二叉树中，所有的结点都有左子树和右子树，并且所有的叶子结点都在都一层上,这样的树叫满二叉树。 哈哈，只可惜此事古难全&hellip;</p></blockquote>

<!--more-->


<p>3.完全二叉树</p>

<blockquote><p>对一颗具有n个结点的二叉树按层编号，如果编号为i( 1 &lt;= i &lt;= n ) 的结点与满二叉树的编号相同，就称为完全二叉树。（叶子结点不一定在同一层上）</p></blockquote>

<p>4.线索二叉树</p>

<blockquote><p>在结点数为n的二叉树中，有n-1个分支线数，指针域有2n个，故空指针域有n+1个，用这些空指针域存储遍历后的序列的前驱和后继，这样形成的二叉树就是线索二叉树(Threaded Binary Tree)。其中用于指向前驱和后继的指针称为线索。</p></blockquote>

<h2>遍历</h2>

<blockquote><p>前序，中序和后序遍历中的序强调的是根结点的访问顺序，如果首先访问根结点，然后访问左子树，最后访问右子树，则称为前序遍历。其他类似。 另外还有按层访问的遍历方法等</p></blockquote>

<p>好吧，这几天一直在修改线索二叉树的代码，大脑都有些转不过来了。。。今天偷偷懒，写写博客休息下。。。</p>

<p>基本二叉树的相关代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">char</span> <span class="n">TElemType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">BiTNode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TElemType</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">BiTNode</span> <span class="o">*</span> <span class="n">lchild</span><span class="p">,</span> <span class="o">*</span> <span class="n">rchild</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">BiTNode</span><span class="p">,</span> <span class="o">*</span><span class="n">PBiTree</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PreOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">InOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">PostOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">CreateBiTree</span><span class="p">(</span><span class="n">PBiTree</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PBiTree</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CreateBiTree</span><span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">PerOrderTraverse : </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PreOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">InOrderTraverse : </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">InOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">PostOrderTraverse : </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PostOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CreateBiTree</span><span class="p">(</span><span class="n">PBiTree</span> <span class="o">*</span><span class="n">T</span><span class="p">){</span>
</span><span class='line'>    <span class="n">TElemType</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="sc">&#39;#&#39;</span> <span class="o">==</span> <span class="n">ch</span> <span class="p">){</span>
</span><span class='line'>         <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>         <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>         <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="p">(</span><span class="n">PBiTree</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">BiTNode</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">T</span>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="p">(</span><span class="o">*</span><span class="n">T</span><span class="p">)</span><span class="o">-&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>         <span class="n">CreateBiTree</span> <span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">T</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span><span class='line'>         <span class="n">CreateBiTree</span> <span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">T</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PreOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="n">T</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">T</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PreOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PreOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">InOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nb">NULL</span> <span class="o">==</span> <span class="n">T</span> <span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InOrderTraverse</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">InOrderTraverse</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PostOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">T</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PostOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PostOrderTraverse</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译时把所有的警告都打印出来</p>

<h3>any warning is a problem, we must fix it</h3>

<p><code>gcc -Wall -Wextra -Wstrict-prototypes -Wold-style-defination -Wmissing-prototypes -c binary.c -o tree1</code></p>

<h3>在此，笑谈下写代码的感受</h3>

<p><a href="http://www.stackoverflow.com">StackOverflow</a></p>

<p>代码出现问题时这绝对是个helper and tutor， 这次代码总是有问题，于是第一次试着在网站上发问了(<a href="http://stackoverflow.com/questions/18305889/how-to-end-the-binary-tree-when-create-it">qustion link</a>).虽然老早就注册了，但从来没用过&hellip;惊喜的是，不到几分钟就有一位 experienced c programmer给评论了，而且问题稀里哗啦的就解决了，最后还帮我解决了些其他问题. 在此特别感谢<strong>Jonathon Leffler</strong> : <em>Thank you for your help and tutoring!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[即时标记]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/16/title/"/>
    <updated>2013-08-16T14:13:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/16/title</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[过滤器设计]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/13/title/"/>
    <updated>2013-08-13T20:04:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/13/title</id>
    <content type="html"><![CDATA[<blockquote><p>高层模块不应该依赖于低层模块。二者都应该依赖于抽象。抽象不应该依赖于细节。细节应该依赖于抽象。</p></blockquote>

<h1><font color = green size = 7 face = "@幼圆"><marquee bgcolor=#ccff99 behavior = alternate>I am still learning</marquee> </font></h1>




<script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"></script>


<p></p>
]]></content>
  </entry>
  
</feed>
