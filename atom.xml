<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Albert Blog]]></title>
  <link href="http://Albert0010.github.io/atom.xml" rel="self"/>
  <link href="http://Albert0010.github.io/"/>
  <updated>2013-08-21T23:33:33+08:00</updated>
  <id>http://Albert0010.github.io/</id>
  <author>
    <name><![CDATA[Albert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/21/title/"/>
    <updated>2013-08-21T13:14:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/21/title</id>
    <content type="html"><![CDATA[<p>&emsp; 字符是计算机处理文字的最基本单位，在查找文件时，我们一般会使用<strong><em>通配符</em></strong>(wildcard),例如*和?等。和通配符类似，正则表达式也是用来模式匹配的，而且功能更加强大。是模式匹配中，正则表达式可谓是带头大哥。各种语言都有支持，如python的re包，awk等。linux虽然略有不同，但都是源于其基本的原则，改变只是为了和posix兼容罢了。还等什么，快来和这位大哥会晤了。。。。。</p>

<!--more-->


<h2>1.元字符</h2>

<p>小编：大哥，我想搜you单词，无奈youself，young&hellip;什么都现身了，怎么解?</p>

<p>大哥：小问题，试一试元字符\byou\b匹配</p>

<p>小编：果断有效，不错</p>

<p>大哥：下面是常用的元字符，记住它，好办事</p>

<table>
<thead>
<tr>
<th></th>
<th>代码</th>
<th align="center">  解释</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>.</td>
<td align="center">匹配除换行以外的所有子符</td>
</tr>
<tr>
<td></td>
<td>\w</td>
<td align="center">匹配字母，数字,下划线或汉字</td>
</tr>
<tr>
<td></td>
<td>\s</td>
<td align="center">匹配任意空白符</td>
</tr>
<tr>
<td></td>
<td>\d</td>
<td align="center">匹配任意数字</td>
</tr>
<tr>
<td></td>
<td>\b</td>
<td align="center">匹配单词的开始或结束</td>
</tr>
<tr>
<td></td>
<td>^</td>
<td align="center">匹配字符串的开始</td>
</tr>
<tr>
<td></td>
<td>$</td>
<td align="center">匹配字符串的结束</td>
</tr>
</tbody>
</table>


<p>全角为汉语输入状态，每个字占两个子符
半角为英文输入状态，每个字母占一个字符</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/17/title/"/>
    <updated>2013-08-17T10:39:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/17/title</id>
    <content type="html"><![CDATA[<h2>基本概念</h2>

<p>1.斜树</p>

<blockquote><p>所有的结点都只有左子树的二叉树叫左斜树。所有的结点都只有右子树的二叉树叫做右斜树。两者都称谓斜树。</p></blockquote>

<p>2.满二叉树</p>

<blockquote><p>在一棵二叉树中，所有的结点都有左子树和右子树，并且所有的叶子结点都在都一层上,这样的树叫满二叉树。 哈哈，只可惜此事古难全&hellip;</p></blockquote>

<!--more-->


<p>3.完全二叉树</p>

<blockquote><p>对一颗具有n个结点的二叉树按层编号，如果编号为i( 1 &lt;= i &lt;= n ) 的结点与满二叉树的编号相同，就称为完全二叉树。（叶子结点不一定在同一层上）</p></blockquote>

<p>4.线索二叉树</p>

<blockquote><p>在结点数为n的二叉树中，有n-1个分支线数，指针域有2n个，故空指针域有n+1个，用这些空指针域存储遍历后的序列的前驱和后继，这样形成的二叉树就是线索二叉树(Threaded Binary Tree)。其中用于指向前驱和后继的指针称为线索。</p></blockquote>

<h2>遍历</h2>

<blockquote><p>前序，中序和后序遍历中的序强调的是根结点的访问顺序，如果首先访问根结点，然后访问左子树，最后访问右子树，则称为前序遍历。其他类似。 另外还有按层访问的遍历方法等</p></blockquote>

<p>好吧，这几天一直在修改线索二叉树的代码，大脑都有些转不过来了。。。今天偷偷懒，写写博客休息下。。。</p>

<p>基本二叉树的相关代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">char</span> <span class="n">TElemType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">BiTNode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TElemType</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">BiTNode</span> <span class="o">*</span> <span class="n">lchild</span><span class="p">,</span> <span class="o">*</span> <span class="n">rchild</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">BiTNode</span><span class="p">,</span> <span class="o">*</span><span class="n">PBiTree</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PreOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">InOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">PostOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">CreateBiTree</span><span class="p">(</span><span class="n">PBiTree</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PBiTree</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CreateBiTree</span><span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">PerOrderTraverse : </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PreOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">InOrderTraverse : </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">InOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">PostOrderTraverse : </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PostOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CreateBiTree</span><span class="p">(</span><span class="n">PBiTree</span> <span class="o">*</span><span class="n">T</span><span class="p">){</span>
</span><span class='line'>    <span class="n">TElemType</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="sc">&#39;#&#39;</span> <span class="o">==</span> <span class="n">ch</span> <span class="p">){</span>
</span><span class='line'>         <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>         <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>         <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="p">(</span><span class="n">PBiTree</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">BiTNode</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">T</span>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="p">(</span><span class="o">*</span><span class="n">T</span><span class="p">)</span><span class="o">-&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>         <span class="n">CreateBiTree</span> <span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">T</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span><span class='line'>         <span class="n">CreateBiTree</span> <span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">T</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PreOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="n">T</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">T</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PreOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PreOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">InOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nb">NULL</span> <span class="o">==</span> <span class="n">T</span> <span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InOrderTraverse</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">InOrderTraverse</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">PostOrderTraverse</span><span class="p">(</span><span class="n">PBiTree</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">T</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PostOrderTraverse</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PostOrderTraverse</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译时把所有的警告都打印出来</p>

<h3>any warning is a problem, we must fix it</h3>

<p><code>gcc -Wall -Wextra -Wstrict-prototypes -Wold-style-defination -Wmissing-prototypes -c binary.c -o tree1</code></p>

<h3>在此，笑谈下写代码的感受</h3>

<p><a href="http://www.stackoverflow.com">StackOverflow</a></p>

<p>代码出现问题时这绝对是个helper and tutor， 这次代码总是有问题，于是第一次试着在网站上发问了(<a href="http://stackoverflow.com/questions/18305889/how-to-end-the-binary-tree-when-create-it">qustion link</a>).虽然老早就注册了，但从来没用过&hellip;惊喜的是，不到几分钟就有一位 experienced c programmer给评论了，而且问题稀里哗啦的就解决了，最后还帮我解决了些其他问题. 在此特别感谢<strong>Jonathon Leffler</strong> : <em>Thank you for your help and tutoring!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[即时标记]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/16/title/"/>
    <updated>2013-08-16T14:13:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/16/title</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[过滤器设计]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/13/title/"/>
    <updated>2013-08-13T20:04:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/13/title</id>
    <content type="html"><![CDATA[<blockquote><p>高层模块不应该依赖于低层模块。二者都应该依赖于抽象。抽象不应该依赖于细节。细节应该依赖于抽象。</p></blockquote>

<h1><font color = green size = 7 face = "@幼圆"><marquee bgcolor=#ccff99 behavior = alternate>I am still learning</marquee> </font></h1>




<script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"></script>


<p></p>
]]></content>
  </entry>
  
</feed>
