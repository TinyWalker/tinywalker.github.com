<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Albert Blog]]></title>
  <link href="http://Albert0010.github.io/atom.xml" rel="self"/>
  <link href="http://Albert0010.github.io/"/>
  <updated>2013-08-18T14:11:45+08:00</updated>
  <id>http://Albert0010.github.io/</id>
  <author>
    <name><![CDATA[Albert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/17/title/"/>
    <updated>2013-08-17T10:39:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/17/title</id>
    <content type="html"><![CDATA[<!--more-->


<h2>基本概念</h2>

<p>1.斜树</p>

<blockquote><p>所有的结点都只有左子树的二叉树叫左斜树。所有的结点都只有右子树的二叉树叫做右斜树。两者都称谓斜树。</p></blockquote>

<p>2.满二叉树</p>

<blockquote><p>在一棵二叉树中，所有的结点都有左子树和右子树，并且所有的叶子结点都在都一层上,这样的树叫满二叉树。 哈哈，只可惜此事古难全&hellip;</p></blockquote>

<p>3.完全二叉树</p>

<blockquote><p>对一颗具有n个结点的二叉树按层编号，如果编号为i( 1 &lt;= i &lt;= n ) 的结点与满二叉树的编号相同，就称为完全二叉树。（叶子结点不一定在同一层上）</p></blockquote>

<p>4.线索二叉树</p>

<blockquote><p>在结点数为n的二叉树中，有n-1个分支线数，指针域有2n个，故空指针域有n+1个，用这些空指针域存储遍历后的序列的前驱和后继，这样形成的二叉树就是线索二叉树(Threaded Binary Tree)。其中用于指向前驱和后继的指针称为线索。</p></blockquote>

<h2>遍历</h2>

<blockquote><p>前序，中序和后序遍历中的序强调的是根结点的访问顺序，如果首先访问根结点，然后访问左子树，最后访问右子树，则称为前序遍历。其他类似。 另外还有按层访问的遍历方法等</p></blockquote>

<h1><font color = green size = 7 face = "@幼圆"><marquee bgcolor=#ccff99 behavior = alternate>持续更新中^o^</marquee> </font></h1>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[即时标记]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/16/title/"/>
    <updated>2013-08-16T14:13:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/16/title</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[过滤器设计]]></title>
    <link href="http://Albert0010.github.io/blog/2013/08/13/title/"/>
    <updated>2013-08-13T20:04:00+08:00</updated>
    <id>http://Albert0010.github.io/blog/2013/08/13/title</id>
    <content type="html"><![CDATA[<blockquote><p>高层模块不应该依赖于低层模块。二者都应该依赖于抽象。抽象不应该依赖于细节。细节应该依赖于抽象。</p></blockquote>

<h1><font color = green size = 7 face = "@幼圆"><marquee bgcolor=#ccff99 behavior = alternate>I am still learning</marquee> </font></h1>




<script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"></script>


<p></p>
]]></content>
  </entry>
  
</feed>
